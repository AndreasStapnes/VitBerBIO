#første kulepunkt problem 2

bone = "bone.txt"
tissue = "tissue.txt"
rhoBone = 1.92
rhoTissue = 1.02

def readFromFile(filename):
    file = open(filename, "r")
    val1 = np.array(0); val2 = np.array(0)
    for n in file:
        myList = n.split(", ")
        val1 = np.append(val1, float(myList[0])); val2 = np.append(val2, float(myList[1]))
    return val1[1:], val2[1:]

boneVal = readFromFile(bone)
tissueVal = readFromFile(tissue)

def plotConstRho():
    plt.figure(figsize=(12,4))
    plt.suptitle(r"Plot of attenuation coefficient $\mu$ as a function of photon energy $E$ for soft tissue and bone")
    plt.xscale("log")
    plt.yscale("log")
    plt.xlabel(r"$E[keV]$")
    plt.ylabel(r"$\mu[cm^{-1}]$")
    plt.plot(boneVal[0]*10**3, boneVal[1] * rhoBone, label="Bone")
    plt.plot(tissueVal[0]*10**3, tissueVal[1] * rhoTissue, label="Tissue")
    plt.legend()
    plt.show()
    
plotConstRho()

#andre og tredje kulepunkt

energies = boneVal[0][21:30]*1e3 #10 til 100 keV
muBone = boneVal[1][21:30] * rhoBone #henter ut relevante mu som tilhører energi i intervallet 10 til 100 keV
muTissue = tissueVal[1][21:30] * rhoTissue
trajectory1 = np.arange(0, 3 + dx, dx) #brukt for 3cm tissue

dx1 = 0.01
tissue1 = np.arange(0, 1+dx, dx1)
bone = np.arange(1, 2+dx, dx1)
tissue2 = np.arange(2, 3+dx, dx1)


def intensitiesTissue(numOfPhotons):
    intensitiesTissue = np.array(0)
    for i in range(len(energies)):
        N = MonteCarlo(numOfPhotons, muTissue[i], trajectory1)[-1]
        I = N*energies[i]
        intensitiesTissue = np.append(intensitiesTissue, I)
    return intensitiesTissue[1:]

def intensitiesBone(numOfPhotons):
    intensitiesBone = np.array(0)
    for i in range(len(energies)):
        N1 = MonteCarlo(numOfPhotons, muTissue[i], tissue1)[-1]
        if(N1 > 0):
            N2 = MonteCarlo(int(N1), muBone[i], bone)[-1]
            if(N2 > 0):
                N = MonteCarlo(int(N2), muTissue[i], tissue2)[-1]
            else:
                N = 0
        else:
            N=0
        I = N*energies[i]
        intensitiesBone = np.append(intensitiesBone, I)
    return intensitiesBone[1:]

I_tissue = intensitiesTissue(1000)
I_tissueandbone = intensitiesBone(1000)
                
def prettyPlotIntensities(): 
    plt.figure(figsize = (12,8))
    plt.title("Intensities of beam at detector, N=1000")
    plt.xlabel(r"$E$ [keV]")
    plt.ylabel(r"I [kV]")
    plt.plot(energies, I_tissue/10**3, color="blue", label = "3cm Tissue")
    plt.plot(energies, I_tissueandbone/10**3, color = "red", label = "Tissue and bone")
    plt.legend()
    plt.show()
    
prettyPlotIntensities()

#fjerde kulepunkt

contrast = (I_tissue[1:]-I_tissueandbone[1:])/I_tissue[1:] #dropper første verdi, ettersom den er 0

def prettyPlotContrast():
    plt.figure(figsize=(12,8))
    plt.title("Contrast as function of energy")
    plt.xlabel(r"$E$ [keV]")
    plt.ylabel("C")
    plt.plot(energies[1:], contrast)
    plt.show()
    
prettyPlotContrast()

#femte kulepunkt

def N0for10MeVIntensity():
    N0_list = np.zeros_like(energies)
    for i in range(len(energies)):
        desiredPhotons = 10000/energies[i] #10Mev/energy[keV], the number of desired photons that reach the detector
        #so that the intensity is 10MeV = 10000keV
        photonsOut = 0
        N0 = 100
        while photonsOut < desiredPhotons:
            photonsOut = MonteCarlo(N0, muTissue[i],trajectory1)[-1]
            N0 += 10
            if(N0 > 1e4): #prøvde å kjøre med N0>1e5, men avslutta da den kjørte 1,5 time
                N0 = 0 # er dette nødvnedig? spør Gard/Andreas
                break
        N0_list[i] = N0
    return N0_list

N0_list = N0for10MeVIntensity()

print(N0_list)
plt.title("Number of photons emitted from source to get 10MeV intensity at detector for differet energies")
plt.xlabel(r"$E$ [keV]")
plt.ylabel(r"$N_0$")
plt.figure(figsize = (12,8))
plt.plot(energies, N0_list) #plotte uten 0 verdiene?
plt.yscale("log")
plt.show()

def beamIntensitiesFromN0Photons():
    I1_intensities = np.zeros_like(N0_list)
    I2_intensities = np.zeros_like(N0_list)
    for n in range(len(N0_list)):
        I1_intensities[n] = MonteCarlo(int(N0_list[n]), muTissue[n], trajectory1)[-1]*energies[n] #I_1
        
        N1 = MonteCarlo(int(N0_list[n]), muTissue[n], tissue1)[-1]
        if(N1 > 0):
            N2 = MonteCarlo(int(N1), muBone[n], bone)[-1]
            if(N2 > 0):
                N = MonteCarlo(int(N2), muTissue[n], tissue2)[-1]
            else:
                N = 0
        else:
            N=0
        I2_intensities[n] = N*energies[n]
    
    return I1_intensities, I2_intensities

I1_intensities, I2_intensities = beamIntensitiesFromN0Photons()

def prettyplotBeams():
    plt.figure(figsize = (12, 8))
    plt.title(r"Intensity for beams $I_1$ and $I_2$ where N = $N_0$ is amount of photons from source that gives 10MeV at detector")
    plt.xlabel(r"$E$ [keV]")
    plt.ylabel(r"I [keV]")
    plt.plot(energies[2:], (I1_intensities/10**3)[2:], label = r"$I_1$") #Plott med eller uten 0-verdiene?
    plt.plot(energies[2:], (I2_intensities/10**3)[2:], label = r"$I_2$")
    plt.legend()
    plt.show()
    
prettyplotBeams()

#sjette kulepunkt
V = 1

def getDoses():
    D1 = np.zeros_like(energies)
    D2 = np.zeros_like(energies)
    for i in range(len(energies)):
        N_att_tissue = N0_list[i]-MonteCarlo(int(N0_list[i]), muTissue[i], trajectory1)[-1]
        D1[i] = (N_att_tissue*energies[i])/(V*rhoTissue)
        
        N1 = MonteCarlo(int(N0_list[i]), muTissue[i], tissue1)[-1]
        if(N1 > 0):
            N2 = MonteCarlo(int(N1), muBone[i], bone)[-1]
            if(N2 > 0):
                N = MonteCarlo(int(N2), muTissue[i], tissue2)[-1]
            else:
                N = 0
        else:
            N=0
        
        N_att_tissueANDbone = N0_list[i] - N
        D2[i] = (N_att_tissueANDbone*energies[i])/(V*(2/3*rhoTissue + 1/3*rhoBone)) #rett rho?
    
    return D1, D2

D1, D2 = getDoses()


def prettyPlotDoseAndContrast(): #får ikke samla til 1 legend....
    plt.figure(figsize=(12,8))
    plt.title("Total dosage absorbed along two beams, as a function of photon energy")
    plt.xlabel(r"$E$ [keV]")
    plt.plot(energies[2:], (D1+D2)[2:], label = "Total dosage", color = "Blue")
    plt.yscale("log")
    plt.ylabel(r"Dose [keV/g]")
    plt.legend()
    plt.twinx().plot(energies[2:], contrast[1:], label = "Contrast", color = "red")
    plt.ylabel("C")
    plt.legend()
    plt.show()
        
prettyPlotDoseAndContrast()
